function aLoc = STIMA_GenLapl_LFV(vertices,midPoints,center,method,bdFlags,kHandle,varargin)
% STIMA_GENLAPL_LFV Element stiffness matrix for the generalized Laplacian.
%
%   ALOC = STIMA_GENLAPL_LFV(VERTICES,MIDPOINTS,CENTER,KHANDLE) computes the 
%   element stiffness matrix for the generalized Laplacian using linear
%   finite volumes.
%
%   VERTICES is 3-by-2 matrix specifying the vertices of the current element
%   in a row wise orientation.
%
%   MIDPOINTS is 3-by-2 matrix specifying the border points on the edges of
%   the element.
%
%   CENTER is a length 2 row-vector specifying the center point of the element.
%
%   METHOD is 'barycentric' or 'orthogonal', which method the mesh was
%   generated by.
%
%   KHANDLE is a function handle for the k-function.
%
%   Example:
%
%   Aloc = STIMA_GenLapl_LFV([0 0; 1 0; 0 1],[.5 0; .5 .5; 0 .5],[.33 .33],'barycentric',@(x)1);
%
%   Copyright 2007-2007 Eivind Fonn
%   SAM - Seminar for Applied Mathematics
%   ETH-Zentrum
%   CH-8092 Zurich, Switzerland

	% Compute required coefficients

	m = zeros(3,3);
	m(1,2) = norm(midPoints(1,:)-center);
	m(1,3) = norm(midPoints(3,:)-center);
	m(2,3) = norm(midPoints(2,:)-center);
	m = m + m';

	mu = zeros(3,3);
	mu(1,2) = kHandle((midPoints(1,:)+center)/2);
	mu(1,3) = kHandle((midPoints(3,:)+center)/2);
	mu(2,3) = kHandle((midPoints(2,:)+center)/2);
	mu = mu + mu';

	mum = mu.*m;

	sigma = zeros(3,2);
	sigma(1,:) = confw(novec(vertices([2 3],:)),vertices(1,:)-vertices(2,:));
	sigma(2,:) = confw(novec(vertices([1 3],:)),vertices(2,:)-vertices(3,:));
	sigma(3,:) = confw(novec(vertices([1 2],:)),vertices(3,:)-vertices(1,:));
	sigma(1,:) = sigma(1,:)/trialtv(vertices);
	sigma(2,:) = sigma(2,:)/trialtv([vertices(2,:);vertices([1 3],:)]);
	sigma(3,:) = sigma(3,:)/trialtv([vertices(3,:);vertices(1:2,:)]);

	% Compute stiffness matrix

	aLoc = zeros(3,3);
	for i=1:3
		for j=1:3
			% Calculate aLoc(i,j)
			for l=[1:(i-1) (i+1):3]
				aLoc(i,j) = aLoc(i,j) -...
			        mum(i,l)*dot(sigma(j,:),confw(novec([midPoints(midpt([i l]),:);center]),vertices(l,:)-vertices(i,:)));
			end
		end
	end
	
	% Helping functions

	function s = midpt(idx)
		idx = sort(idx);
		if idx==[1 2]
			s = 1;
		elseif idx==[2 3]
			s = 2;
		else
			s = 3;
		end
	end

	function v = confw(v,t)
		if dot(t,v)<0
			v = -v;
		end
	end

	function out = novec(v)
		out = v(2,:)-v(1,:);
        if norm(out) ~= 0
            out = [-out(2) out(1)]/norm(out);
        end
	end

	function out = trialtv(v)
		out = norm(v(2,:)-v(1,:) + dot(v(3,:)-v(2,:),v(1,:)-v(2,:))/(norm(v(3,:)-v(2,:))^2)*(v(3,:)-v(2,:)));
	end
end
