%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Local computations %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\chapter{Local Computations} \label{chap:local_comp}

 The interpretation of a partial differential equation in the weak sense yields the variational formulation of the boundary value problem. A linear variational problem is of the form
\begin{equation} \label{eq:int_eq}
	u \in V: \quad a(u,v) = f(v) \quad \forall v \in V
\end{equation} 
 where $V$ is the test space, $a$ a (symmetric) bilinear form, $f$ a linear form and $u$ the solution. The terms $a$ and $f$ depend on the differential operator resp. the right hand side of the equation. Due to discretization, $V$ is replaced by the discrete test space $V_N$, a discrete variational problem has to be solved. By choosing a basis $B_N = \left\lbrace b^1_N, \ldots, b^N_N \right\rbrace$ for $V_N$ the integral equation \eqref{eq:int_eq} is transformed to an algebraic equation
\begin{equation}
	{\mathtt A} \mu = {\mathtt L} \\
\end{equation}
 with stiffness matrix \ttindex{A} $=(a(b^k_N,b^j_N))_{j,k=1}^N$\index{stiffness matrix}, load vector \ttindex{L} $=(f(b^j_N))_{j=1}^N$\index{load vector} and coeffient vector $\mu$ from which the solution ${\mathtt u}=\sum_{k=1}^N \mu_k b^k_N$\index{solution} may be recovered. \\

 All the basis functions occuring in in the definition of \ttindex{A} and \ttindex{L} are composed of element shape functions. For reasons concerning computational time the stiffness matrix is not assembled entry by entry, which would need two loops over all basis functions. It is better to loop over all elements and compute the contribution to the stiffness matrix. To do so one has to consider all the shape functions $b_K^l$ on the triangular element $K$. The corresponding local stiffness matrix is then given by $\mathtt{Aloc}_{i,j} = a(b_K^i,b_K^j)$ and the load vector by $\mathtt{Lloc}_{i}=f(b_K^i)$. Furthermore there the computation of the mass matrix given by the $L^2$ inner product $\mathtt{Mloc}_{i,j} = (b_K^i,b_K^j)$ is implemented The aim of this section is to introduce the necessary \MATLAB functions which compute these matrices and vectors.

 The local computations are then summed up to the global matrices {\tt A} and {\tt M} and the global load vector {\tt L} by the assembly routines described in chapter \ref{chap:assem}. \\

 Since local computations vary depending on the equation they are used for there is no point in listing and describing all those \MATLAB functions of the LehrFEM. Still, the central theme is treated in the following. For more information please read the well-documented code of the functions stored in {\tt /Lib/Element}. The file names are abbreviations for

\begin{table}[htb]
  \begin{tabular}{p{1.8cm}p{9.2cm}}
    {\tt STIMA\_**\_*} & {\small element stiffness matrix for the operator {\tt **} and finite elements {\tt *}} \\
    {\tt MASS\_*} & {\small element mass matrix for finite elements {\tt *}} \\
    {\tt LOAD\_**\_*} & {\small element load vector for the operator {\tt **} and finite elements {\tt *}}
  \end{tabular}
  \caption{File names for element functions}
  \label{tab:element}
\end{table}

% For some examples see chapter ???

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Element stiffness matrices %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Element Stiffness Matrices} \label{sect:stima} \index{element stiffness matrix|(}

\subsection{Input Arguments} \index{element stiffness matrix!input}

 The main input arguments for the computations in 2D are listed in table \ref{tab:stima_in}. In the 1-dimensional case {\tt Vertices} is obviously a $2$-by-$1$ matrix.

\begin{table}[htb]
  \begin{tabular}{p{2cm}p{9cm}}
    \ttindex{Vertices} & {\small $3$-by-$2$ or $4$-by-$2$ matrix specifying the vertices of the current element in a row wise orientation} \\
    \ttindex{ElemInfo} & {\small integer parameter which is used to specify additional element information} \\
    \ttindex{QuadRule} & {\small struct, which specifies the Gauss qaudrature that is used to do the integration (see \ref{sect:quad_rule_2d}, p. \pageref{sect:quad_rule_2d})} \\
    {\tt EHandle} & {\small function handle for the differential operator} \\
    {\tt EParam} & {\small variable length argument list for {\tt EHandle}}
  \end{tabular}
  \caption{Input arguments for {\tt STIMA} (2D)}
  \label{tab:stima_in}
\end{table}


 Besides the mesh and the operator, the shape functions resp. its gradients are needed for the computation of the local contributions. The functions {\tt shap\_*} and {\tt grad\_shap\_*} are called within the program. \\

 For some operators, e.g. the Laplacian, no quadrature rules, operator nor shape functions are required, cause they are already included in the program resp. the matrix entries are computed using barycentric coordinates. \\

 The functions for the boundary terms require data of the {\tt Edges} instead of {\tt Vertices} etc.


\subsection{Output} \index{element stiffness matrix!output}

 In all {\tt STIMA}-functions the outputs are $l$-by-$l$ matrices \ttitindex{Aloc} where $l$ are the local degrees of freedom. The element in the $k$-th row and $j$-th column is the contribution $a(b^k_N,b^j_N)$ of the $k$-th and $j$-th shape functions on the current element. \\

 The element stiffness matrices are assembled\index{assembling!global matrix} using the assembly routines {\tt assemMat} in {\tt /Lib/Assembly}, cf. section \ref{sect:assem_mat}, p. \pageref{sect:assem_mat}.


\subsection{Principles of Computation}

 First, an affine (linear) transformation of the finite element to a standard reference element is done, i.e. the square $[0,1]^2$ or the triangle with the vertices $(0,0)$, $(0,1)$ and $(1,0)$ in the 2-dimensional case. Then the matrix entries {\tt Aloc(k,j)} are computed using the given quadrature rule {\tt QuadRule} and the respective shape functions. In very easy cases occuring integrals can be computed analytically. Then the computation of the element stiffness matrix is done directly and neither a transformation nor quadrature rules are used.

 If the bilinear form $a$ is symmetric, then {\tt Aloc} is a symmetric matrix and only the upper triangle needs to be computed.
 

\subsection{Examples} \index{element stiffness matrix!examples}


\subsubsection{Laplacian} \index{Laplacian!element stiffness matrix}

The element matrix for the Laplacian using linear finite elements is computed by the routine

\noindent \verb!>> Aloc = STIMA_Lapl_LFE(Vertices);!

The corresponding matlab code for computing the $3$-by-$3$ matrix is

\begin{lstlisting}
 function Aloc = STIMA_Lapl_LFE(Vertices,varargin)
  % Preallocate memory
  
  Aloc = zeros(3,3);

  % Analytic computation of matrix entries using
  % barycentric coordinates
  
  a = norm(Vertices(3,:)-Vertices(2,:)); 
  b = norm(Vertices(3,:)-Vertices(1,:));
  c = norm(Vertices(2,:)-Vertices(1,:));
  s = (a+b+c)/2;
  r = sqrt((s-a)*(s-b)*(s-c)/s);
  cot_1 = cot(2*atan(r/(s-a)));
  cot_2 = cot(2*atan(r/(s-b)));
  cot_3 = cot(2*atan(r/(s-c)));
  
  Aloc(1,1) = 1/2*(cot_3+cot_2);
  Aloc(1,2) = 1/2*(-cot_3);
  Aloc(1,3) = 1/2*(-cot_2);
  Aloc(2,2) = 1/2*(cot_3+cot_1);
  Aloc(2,3) = 1/2*(-cot_1);
  Aloc(3,3) = 1/2*(cot_2+cot_1);
  
  % Update lower triangular part
  
  Aloc(2,1) = Aloc(1,2);
  Aloc(3,1) = Aloc(1,3);
  Aloc(3,2) = Aloc(2,3);

return
\end{lstlisting}


 The element matrices for the Laplacian and Crouzeix-Raviart elements e.g. by \\

\noindent {\tt >> Aloc = STIMA\_Lapl\_CR\index{STIMA\_Lapl\_CR@{\tt STIMA\_Lapl\_CR}}(Vertices);}


\subsubsection{Heat Equation} \index{Heat equation!element stiffness matrix!bilinear finite elements}

The element matrices for the heat equation and bilinear finite elements are e.g. generated by \\
 
\noindent {\tt >> Aloc = STIMA\_Heat\_BFE\index{STIMA\_Heat\_BFE@{\tt STIMA\_Heat\_BFE}}(Vertices,ElemInfo,QuadRule, ... \\
EHandle,EParam);}

This routine is for quadrilateral meshes, the specification of the quadrature rule could for example be

\verb!QuadRule = TProd(gauleg(0,1,2));!


\subsubsection{Helmholtz Equation} \index{Helmholtz equation!element stiffness matrix}

 The following computes the entries of the element stiffness matrix for a discontinuous plane wave discretization of the Helmholtz equation on Neumann boundary edges: \\

\noindent {\tt >> Aloc = STIMA\_Helm\_Neu\_Bnd\_PWDG\index{STIMA\_Helm\_Neu\_Bnd\_PWDG@{\tt STIMA\_Helm\_Neu\_Bnd\_PWDG}}(Edge,Normal,Params,Data, ... \\
omega,QuadRule,varargin);} \\

 Here, {\tt Params} and {\tt Data} (contains the left and right hand side element data) are structs with the fields specified in tables \ref{tab:params} and \ref{tab:data}.

\begin{table}[htb]
  \begin{tabular}{p{1cm}p{10cm}}
    {\tt b} & {\small scalar coefficient for a term containing jumps of the normal derivative in the numerical flux for the gradient} \\
    {\tt nDofs} & {\small total number of degrees of freedom on elements adjacent to current edge} \\
    {\tt L2} & {\small $L^2$ inner product matrix on the current edge}
  \end{tabular}
  \caption{Basic {\tt Params} data structure}
  \label{tab:params}
\end{table}

\begin{table}[htb]
  \begin{tabular}{p{2cm}p{9cm}}
    \ttindex{Element} & {\small integer specifying the neighbouring element} \\
    \ttindex{ElemData} & {\small structure contains the fields {\tt NDofs} (number of degrees of freedom on the current element) and {\tt Dir} ($P$-by-$2$ matrix containing the propagation directions of the plane wave basis functions in its rows)} \\
    \ttindex{Vertices} & {\small $3$-by-$2$ or $4$-by-$2$ matrix specifying the vertices of the neighbouring element} \\
    \ttindex{EdgeLoc} & {\small integer specifying the local edge number on the neighbouring element} \\
    \ttindex{Match} & {\small integer specifying the relative orientation of the edge w.r.t. the orientation of the neighbouring element}
  \end{tabular}
  \caption{Basic {\tt Data} structure}
  \label{tab:data}
\end{table}

 \ttindex{Edge} is a $2$-by-$2$ matrix whose rows contain the start and end node of the current edge, \ttindex{Normal} is a $1$-by-$2$ matrix which contains the interior unit normal vector w.r.t. the current edge {\tt Edge}.
 
 \subsubsection{DG finite elements}
 
 In the case of a DG discretization in addition to the volume terms one gets additional contributions that correspond to the discontinuities along the edges. The local bilinear form on an element $T$ for the symmetric interior penalty method for two basis functions $b_i$ and $b_j$ is given by
 \begin{multline}
  a(b_i,b_j)=\int_T \nabla b_i \cdot \nabla b_j 
  	-\int_{\partial T}(\{\nabla b_i\} \cdot [ b_j ] + \{\nabla b_j\} \cdot [ b_i ])
  	+\int_{\partial T} a [ b_i ][ b_j ].
  	\label{eq:ipm}
 \end{multline}
 On the edges we define $\{\nabla b \}=(\nabla b^+ + \nabla b^-)/2$ and $[ b_i ]=b_i^+ \mathbf n^+ + b_i^- \mathbf n^-$. For more details see [].
 
 The computation of the stiffness matrix is divided into five steps and in each of the steps a local matrix has to be computed.
 
 For any element of the mesh the first integral gives rise to a $l$-by-$l$ matrix, where $l$ denotes the degrees of freedom on every element. For the Laplace operator in combination with Lagrangian finite elements of degree $p$ this is implemented. The code for assembling the matrix, which is a part of the function {\tt STIMA\_Lapl\_Vol\_PDG} can be found below.
  
\begin{lstlisting}
for j1 = 1:nDofs % loop over columns
  loc_1 = 2*(j1-1) + [1 2];
  for j2 = j1:nDofs % loop over lines
    loc_2 = 2*(j2-1) + [1 2];
    Aloc(j1,j2) = sum(QuadRule.w.*sum(grad_N(:,loc_1).*...
	(grad_N(:,loc_2)*TK),2)); % numerical integration
  end
end

% Fill in lower trinagular part (symmetry)
    
tri = triu(Aloc);
Aloc = tril(transpose(tri),-1)+tri;
  
\end{lstlisting}

Along every interior edge one gets a local $2l$-by-$2l$ matrix for both, the second and the third integral in \eqref{eq:ipm}. Following the example from above with the Laplacian as differential operator and Lagrangian finite elements this can be computed using the functions {\tt STIMA\_Lapl\_Inn\_PDG} and {\tt STIMA\_InnPen\_PDG}.

Furthermore along boundary edges the second and third integral in \eqref{eq:ipm} both yield a $l$-by-$l$ matrix. For the example from before these can be computed using {\tt STIMA\_Lapl\_Bnd\_PDG} and {\tt STIMA\_BndPen\_PDG}.
 
 
 \subsubsection{$hp$-finite elements}
 
 The local stiffness matrix for the Laplacian operator using $hp$-finite elements can be computed using
 
 \noindent \verb!>> Aloc = STIMA_Lapl_hp(Vertices,ElemInfo,EDofs,EDir,CDofs,QuadRule,Shap);!
 
 The integers {\tt EDofs} ans {\tt CDofs} specify the degrees of freedom on the element and in the interior respectively. Details can be found in Table \ref{tab:mass_hp}.
 
 \begin{table}[htb]
  \begin{tabular}{p{1.5cm}p{9.5cm}}
	{\tt EDofs}\index{EDofs@{\tt EDofs}} & {\small $1$-by-$3$ matrix specifying the maximum polynomial degree of the edge shape functions on every edge} \\
	{\tt EDir}\index{EDir@{\tt EDir}} & {\small $1$-by-$3$ matrix specifying the orientation of the edges of the element} \\
	{\tt CDofs}\index{CDofs@{\tt CDofs}} & {\small integer specifying the maximum polynomial degree inside the element}
  \end{tabular}
  \caption{Additional input for {\tt MASS\_hp}}
  \label{tab:mass_hp}
\end{table}

\index{element stiffness matrix|)}